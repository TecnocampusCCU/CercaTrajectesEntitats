# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CercaTrajectesEntitats
                                 A QGIS plugin
 CercaTrajectesEntitats
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-13
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Josep López
        email                : jlopez@tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import sys
import os
import processing
from os.path import expanduser
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QAction,QMessageBox,QTableWidgetItem, QApplication
from qgis.core import QgsMapLayer
from qgis.core import QgsDataSourceUri
from qgis.core import QgsVectorLayer
from qgis.core import QgsFeatureRequest
from qgis.core import QgsField
from qgis.core import QgsPoint
from qgis.core import QgsPointXY
from qgis.core import QgsFeatureRenderer
from qgis.core import QgsVectorFileWriter
from qgis.core import QgsGraduatedSymbolRenderer
from qgis.core import QgsCategorizedSymbolRenderer
from qgis.core import QgsGradientColorRamp
from qgis.core import QgsProject
from qgis.core import QgsRendererRange
from qgis.core import QgsSymbol
from qgis.core import QgsFillSymbol
from qgis.core import QgsLineSymbol
from qgis.core import QgsSymbolLayerRegistry
from qgis.core import QgsRandomColorRamp
from qgis.core import QgsRendererRangeLabelFormat
from qgis.core import QgsProject
from qgis.core import QgsLayerTreeLayer
from qgis.core import QgsRenderContext
from qgis.core import QgsPalLayerSettings
from qgis.core import QgsTextFormat
from qgis.core import QgsTextBufferSettings
from qgis.core import QgsVectorLayerSimpleLabeling
from qgis.core import QgsWkbTypes
from qgis.core import QgsVectorLayerExporter
import psycopg2
import unicodedata
import datetime
import time
from qgis.utils import iface
from PyQt5.QtSql import *
import datetime
import time

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .CercaTrajectesEntitats_dialog import CercaTrajectesEntitatsDialog
import os.path
from itertools import dropwhile

"""
Variables globals per a la connexio
i per guardar el color dels botons
"""
Versio_modul="V_Q3.191205"
nomBD1=""
contra1=""
host1=""
port1=""
usuari1=""
schema=""
Fitxer=""
cur=None
conn=None
progress=None
aux=False
itemSel=None
lbl_Cost = ''


class CercaTrajectesEntitats:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CercaTrajectesEntitats_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = CercaTrajectesEntitatsDialog()
        
        self.dlg.bt_sortir.clicked.connect(self.on_click_Sortir)
        self.dlg.bt_inici.clicked.connect(self.on_click_Inici)
        self.dlg.bt_delete.clicked.connect(self.on_click_DeleteText)
        self.dlg.comboConnexio.currentIndexChanged.connect(self.on_Change_ComboConn)
        self.dlg.txt_nomCarrer.textChanged.connect(self.cercaDescipcioAux)
        self.dlg.bttnProper.clicked.connect(self.on_click_Proper)
        self.dlg.bttnProperParell.clicked.connect(self.on_click_ProperParell)
        self.dlg.list_carrers.itemDoubleClicked.connect(self.showItem)
        self.dlg.comboCost.currentIndexChanged.connect(self.changeComboCost)
        self.dlg.comboLeyenda.currentIndexChanged.connect(self.on_Change_ComboLeyenda)
        self.dlg.bt_ReloadLeyenda.clicked.connect(self.cerca_elements_Leyenda)

        

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&CCU')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar('CCU')
        self.toolbar.setObjectName('CercaTrajectesEntitats')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CercaTrajectesEntitats', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/CercaTrajectesEntitats/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('Cerca Trajectes Entitats'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def on_click_Sortir(self):
        '''
        Tanca la finestra del plugin 
        '''
        self.estatInicial()
        self.dlg.close()
        
    def getConnections(self):
        """Aquesta funcio retorna les connexions que estan guardades en el projecte."""
        s = QSettings() 
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections
    
    def populateComboBox(self,combo,list,predef,sort):
        """Procediment per omplir el combo especificat amb la llista suministrada"""
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)
        
    def on_click_Proper(self, clicked):
        '''
        Aquesta funcio modifica l'aparença dels botons 'Proper' i 'Proper Senar/Parell'
        quan el primer és pitjat
        '''
        if clicked:
            self.setButtonChecked(self.dlg.bttnProper)
            self.setButtonUnchecked(self.dlg.bttnProperParell)
        else:
            self.setButtonChecked(self.dlg.bttnProperParell)
            self.setButtonUnchecked(self.dlg.bttnProper)
            
    def on_click_ProperParell(self, clicked):
        '''
        Aquesta funcio modifica l'aparença dels botons 'Proper' i 'Proper Senar/Parell'
        quan el segon és pitjat
        '''
        if clicked:
            self.setButtonChecked(self.dlg.bttnProperParell)
            self.setButtonUnchecked(self.dlg.bttnProper)
        else:
            self.setButtonChecked(self.dlg.bttnProper)
            self.setButtonUnchecked(self.dlg.bttnProperParell)
            
    def setButtonChecked(self, boto):
        '''
        Funció auxiliar per canviar aparença de botons
        '''
        boto.setChecked(True)
        boto.setStyleSheet('background-color: rgb(85, 255, 127)')
        
    def setButtonUnchecked(self, boto):
        '''
        Funció auxiliar per canviar aparença de botons
        '''
        boto.setChecked(False)
        boto.setStyleSheet('background-color: rgb(255, 156, 156)')
        
        
        
    def on_Change_ComboConn(self):
        """
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de les connexions,
        automàticament comprova si es pot establir
        connexió amb la bbdd seleccionada.
        """
        global aux
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global cur
        global conn
        s = QSettings()
        self.dlg.comboCapaDesti.clear()
        self.dlg.comboLeyenda.clear()
        self.dlg.comboGraf.clear()
        self.dlg.comboLletra.clear()
        self.dlg.txt_nomCarrer.clear()
        self.dlg.txt_Numero.clear()
        self.dlg.list_carrers.clear()
        select = 'Selecciona connexió'
        nom_conn=self.dlg.comboConnexio.currentText()
        
        
        if nom_conn != select:
            aux = True
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()
            
            nomBD1 = s.value("database", "" )
            contra1 = s.value("password", "" )
            host1 = s.value("host", "" )
            port1 = s.value("port", "" )
            usuari1 = s.value("username", "" )
            schema= 'public'
            
            self.barraEstat_connectant()
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()

            #Connexio
            nomBD = nomBD1.encode('ascii','ignore')
            usuari = usuari1.encode('ascii','ignore')
            servidor = host1.encode('ascii','ignore')     
            contrasenya = contra1.encode('ascii','ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + usuari.decode("utf-8") +"' host='" + servidor.decode("utf-8") +"' password='" + contrasenya.decode("utf-8") + "'"# schema='"+schema+"'"
                conn = psycopg2.connect(estructura)
                self.barraEstat_connectat()
                cur = conn.cursor()
                
                sql = "select g.f_table_name from geometry_columns g join information_schema.columns c on g.f_table_name = c.table_name where g.type = 'POINT' and g.f_table_schema ='public' and c.table_schema ='public' and c.column_name like 'Nom%'order by 1"
                cur.execute(sql)
                llista = cur.fetchall()
                self.ompleCombos(self.dlg.comboCapaDesti, llista, 'Selecciona una entitat', True)
                self.ompleLletra()
                sql2 = "select f_table_name from geometry_columns where ((type = 'MULTILINESTRING' or type = 'LINESTRING') and f_table_schema ='public') order by 1"
                cur.execute(sql2)
                llista2 = cur.fetchall()
                self.ompleCombos(self.dlg.comboGraf, llista2, 'Selecciona una entitat', True)
                
                self.cerca_elements_Leyenda()
                
                
            except Exception as ex:
                print ("I am unable to connect to the database")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback()
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                return
            
            try:
                self.cercaDescripcio()
            except Exception as ex:
                print ("Descripció no  funciona!")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error canvi connexió")
                conn.rollback
                return
        else:
            aux = False
            self.barraEstat_noConnectat()
            
    
    def cerca_elements_Leyenda(self):
        
        if self.dlg.comboConnexio.currentText() != 'Selecciona connexió':
            try: #Accedir als elements de la llegenda que siguin de tipus punt.
                aux = []
                layers = QgsProject.instance().mapLayers().values()
                for layer in layers:
                    #print(layer.type())
                    if layer.type()==QgsMapLayer.VectorLayer:
                        if layer.wkbType()==QgsWkbTypes.Point:
                            aux.append(layer.name())
                        
                self.ompleCombos(self.dlg.comboLeyenda, aux, 'Selecciona una entitat', True)
            except Exception as ex:
                missatge="Error al afegir els elements de la llegenda"
                print (missatge)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", missatge)
                return
    
    def showItem(self):
        '''
        Funció que posa el nom del carrer al camp de cerca de carrer quan es fa doble-click
        a un element de la llista 
        '''
        global itemSel
        itemSel=self.dlg.list_carrers.selectedItems()[0].toolTip()
        self.dlg.txt_nomCarrer.setText(self.dlg.list_carrers.selectedItems()[0].text())
            
    def ompleLletra(self):
        '''
        Aquesta funció omple el desplegable de lletres amb totes les opcions possibles:
        totes les lletres que figuren en l'últim caracter del Carrer_Num_Bis de la 
        capa de dintreilla
        '''
        global conn
        global cur
        self.dlg.comboLletra.clear()
        sql = "SELECT * from (select distinct(upper(right(\"Carrer_Num_Bis\",1))) from \"dintreilla\" order by 1) consulta where \"upper\"  not in  ('0','1', '2', '3','4','5','6','7','8','9');"
        cur.execute(sql)
        rows = cur.fetchall()
        self.ompleCombos(self.dlg.comboLletra, rows, ' ', True)
    
    def cercaDescipcioAux(self):
        '''
        Funció auxiliar que evita un problema amb la connexió quan
        s'executa el plugin de nou: en el cas que no hi hagi cap connexió,
        no permet que es faci cap cerca
        '''
        global aux
        if aux:
            self.cercaDescripcio()
    
    def cercaDescripcio(self):
        """Aquesta funcio cerca els carrers que continguin la paraula clau que li passem"""
        global cur
        global conn        #Sentencia SQL
        self.dlg.list_carrers.clear()
        #sql = 'select "Codi", "Tipus","Nom" from anterior."NOMENCLATOR"'
        sql = 'select "Codi", "Tipus","Nom" from "Carrer"'
        filtre=self.dlg.txt_nomCarrer.text().upper()
        
        filtre = filtre.replace("'", "''")
        wheresql=" WHERE \"Nom\" LIKE \'%"+filtre+"%\' order by 3;"
        total = sql + wheresql
        cur.execute(total)
        rows = cur.fetchall()
        for index,row in enumerate(rows,start=0):
            if row[1] is None:
                desc=str(row[2])
            else:
                desc=str(row[1]) + " " + str(row[2])
            self.dlg.list_carrers.addItem(desc)
            self.dlg.list_carrers.item(index).setToolTip(str(row[0]))
            
    def ompleCombos(self, combo, llista, predef, sort):
        """Aquesta funció omple els combos que li passem per paràmetres"""
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in llista:
            try:
                if isinstance(elem, tuple):
                    item = QStandardItem(unicode(elem[0]))
                else:
                    item = QStandardItem(str(elem))
            except TypeError:
                item = QStandardItem(str(elem[0]))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)
        
    def changeComboCost(self):
        """Aquesta funció controla el canvi d'opció del comboBox del mètode treball."""
        global lbl_Cost
        dist = 'Distancia'
        temps = 'Temps'
        nom_metode=self.dlg.comboCost.currentText()
        if dist == nom_metode:
            self.dlg.chk_CostNusos.setEnabled(False)
            self.dlg.chk_CostNusos.setChecked(False)
            lbl_Cost = 'Distància (m)'
            self.dlg.chk_Local.setEnabled(True)
            self.dlg.chk_Local.setChecked(True)
        else:
            self.dlg.chk_CostNusos.setEnabled(True)
            lbl_Cost = 'Temps (min)'
            self.dlg.chk_Local.setEnabled(False)
            self.dlg.chk_Local.setChecked(False)
        
    def estatInicial(self):
        '''
        @param self:
        Resteja tots els valors per defecte del plugin: estat inicial.
        '''
        global aux
        global Versio_modul
        global itemSel
        global lbl_Cost
        aux = False
        itemSel = None
        self.dlg.comboLletra.clear()
        self.dlg.comboLeyenda.clear()
        self.dlg.comboGraf.clear()
        self.barraEstat_noConnectat()
        self.dlg.list_carrers.clear()
        self.dlg.txt_nomCarrer.clear()
        self.dlg.comboCapaDesti.clear()
        self.dlg.taulaResultat.clear()
        self.eliminaTaula()
        self.dlg.txt_Numero.clear()
        self.dlg.versio.setText(Versio_modul)
        self.setButtonChecked(self.dlg.bttnProper)
        self.setButtonUnchecked(self.dlg.bttnProperParell)
        self.dlg.SB_camins.setValue(3)
        self.dlg.lbl_numpol.setText('')
        self.dlg.comboCost.setCurrentIndex(0)
        self.dlg.chk_CostNusos.setEnabled(False)
        self.dlg.chk_CostNusos.setChecked(False)
        self.dlg.chk_Local.setEnabled(True)
        self.dlg.chk_Local.setChecked(False)
        lbl_Cost = 'Distància (m)'
        self.dlg.chk_Local.setChecked(True)
        self.dlg.chk_Local.setEnabled(True)
        self.dlg.tabWidget_Destino.setCurrentIndex(0)
    
    def on_Change_ComboGraf(self, state):
        """
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de la capa de punts,
        automÃ ticament comprova els camps de la taula escollida.
        """
        try:
            capa=self.dlg.comboGraf.currentText()
            if capa != "":
                if capa != 'Selecciona una entitat':
                    if (self.grafValid(capa)):
                        pass
                    else:
                        QMessageBox.information(None, "Error", 'El graf seleccionat no té la capa de nusos corresponent.\nEscolliu un altre.')
        except Exception as ex:
            print ("Error Graf seleccionat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error Graf seleccionat")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            self.bar.clearWidgets()
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
    
    
    def controlErrorsInput(self):
        '''
        Aquesta funció s'encarrega de controlar que quan comenci el càlcul
        totes les entrades de dades estiguin omplertes i siguin correctes
        '''
        global itemSel
        errors = []
        if self.dlg.comboConnexio.currentText() == 'Selecciona connexió':
            errors.append("No hi ha connexió")
        try:
            numero = int(float(self.dlg.txt_Numero.text()))
            if numero < 0:
                errors.append("El número de policia no pot ser negatiu")
        except:
            errors.append("El número de policia no és vàlid")
        if itemSel == None:
            errors.append('El carrer de la llista no està correctament seleccionat')
        if self.dlg.comboCapaDesti.currentText() == '':
            errors.append('No hi ha cap capa de destí disponible')
        if self.dlg.comboGraf.currentText() == 'Selecciona una entitat':
            errors.append("No hi ha seleccionada cap capa de xarxa")
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            if self.dlg.comboCapaDesti.currentText() == 'Selecciona una entitat':
                errors.append('No hi ha cap capa de destí seleccionada')
        else:
            if self.dlg.comboLeyenda.currentText() == 'Selecciona una entitat':
                errors.append('No hi ha cap capa de destí seleccionada')
        return errors
    
    def comprovaCNB(self,CNB,carrer,numero,lletra):
        '''
        Aquest funció s'encarrega de trobar el 'Carrer_Num_Bis' exacte o més proper
        al que l'usuari ha demanat en el formulari
        '''
        global cur
        global conn
        '''
        Primer comprova si el CNB que ha passat l'usuari existeix:
            Si existeix el retorna com a vàlid
            Altrament busca el més proper: Si no en troba cap de vàlid, emet un error
        '''
        select = 'select count(*) from "dintreilla" where "Carrer_Num_Bis" = \''+ CNB + '\';'
        cur.execute(select)
        resultat = cur.fetchall()
        if (int(float(resultat[0][0])) >= 1):
            return CNB
        else:
            create = 'drop table if exists checkNum;\n'
            if self.dlg.bttnProper.isChecked():
                create += 'create local temp table checkNum as select nullif(SUBSTRING ( "Carrer_Num_Bis" ,6 , 3 ), \'\') ::int as numero from "dintreilla" where "Carrer_Num_Bis" like \'' + carrer +'%\' order by 1;'
            elif self.dlg.bttnProperParell.isChecked():
                if ((int(float(numero))%2)  == 0):
                    create += 'create local temp table checkNum as select * from (select nullif(SUBSTRING ( "Carrer_Num_Bis" ,6 , 3 ), \'\') ::int as numero from "dintreilla" where "Carrer_Num_Bis" like \'' + carrer +'%\' order by 1) as num where numero%2 = 0;'
                else:
                    create += 'create local temp table checkNum as select * from (select nullif(SUBSTRING ( "Carrer_Num_Bis" ,6 , 3 ), \'\') ::int as numero from "dintreilla" where "Carrer_Num_Bis" like \'' + carrer +'%\' order by 1) as num where numero%2 = 1;'
                
            select = 'SELECT * FROM\n'
            select += '((SELECT numero FROM checkNum WHERE numero >= '+ str(int(float(numero))) +' ORDER BY numero LIMIT 1)  UNION\n'
            select += '(SELECT numero FROM checkNum WHERE numero < '+ str(int(float(numero))) +' ORDER BY numero DESC LIMIT 1))  as limitat\n'
            select += 'ORDER BY abs('+ str(int(float(numero))) +'-numero) LIMIT 1;'
            
            cur.execute(create)
            conn.commit()
            
                
            count_select = 'select count(*) from checkNum;'
            cur.execute(count_select)
            resultat = cur.fetchall()
            if int(float(resultat[0][0])) == 0:
                return '-1'

                
            cur.execute(select)
            resultat = cur.fetchall()
            nouNumero = resultat[0][0]
            if int(float(resultat[0][0])) < 100:
                nouNumero = '0' + str(resultat[0][0])
            if int(float(resultat[0][0])) < 10:
                nouNumero = '00' + str(resultat[0][0])

            
            CNBsenseLletra = carrer + str(nouNumero)
            select = 'select count(*) from "dintreilla" where "Carrer_Num_Bis" = \''+ CNBsenseLletra + 'x\';'
            cur.execute(select)
            resultat = cur.fetchall()
            if (int(float(resultat[0][0])) >= 1):
                return (CNBsenseLletra + 'x')
            else:
                select = 'select SUBSTRING ( "Carrer_Num_Bis" ,9 , 1 )as lletra from "dintreilla" where "Carrer_Num_Bis" like \''+ CNBsenseLletra +'%\' order by 1;'
                cur.execute(select)
                resultat = cur.fetchall()
                return (CNBsenseLletra + str(resultat[0][0]))
            
    def on_click_DeleteText(self):
        global itemSel
        '''
        Aquesta funció s'encarrega d'esborrar el text de cerca quan es prem el botó amb una creu 'X'
        contigu a la barra de cerca de carrers.
        '''
        self.dlg.txt_nomCarrer.clear()
        itemSel = None
        
        
    def calculo_Local(self,network_lyr,CNB,uri2,start_point,end_lyr):        
        #processing.algorithmHelp("native:shortestpathpointtolayer")
        parameters= {'INPUT':network_lyr,
                     'STRATEGY':0, 
                     'DIRECTION_FIELD': '',
                     'VALUE_FORWARD': '',
                     'VALUE_BACKWARD': '',
                     'VALUE_BOTH': '',
                     'DEFAULT_DIRECTION':2,
                     'SPEED_FIELD': '',
                     'DEFAULT_SPEED':1,
                     'TOLERANCE':0,
                     'START_POINT':start_point,
                     'END_POINTS':end_lyr,
                     'OUTPUT':'memory:'}
        
        return processing.run('native:shortestpathpointtolayer',parameters)
        
    def save_vlayer(self,end_lyr):
        end_lyr.selectAll()
        parameters= {'INPUT':end_lyr,
                     'OUTPUT':'memory:'}
        
        return processing.run("native:saveselectedfeatures", parameters)
    
    
    def featureNotInResult(self,target,resultado):
        features = resultado.getFeatures()
        for feature in features:
            if(target['entitatid'] == feature['entitatid']):
                return False  
         
        return True
    
    
    def compareToGetOrdre(self,target,resultado):
        features = resultado.getFeatures()
        for feature in features:
            if(target['entitatid'] == feature['entitatid']):
                return feature['ordre']
        return 0
        
    def getIndexOrdre(self,vlayer):
        fields = vlayer.fields()
        for x in range(len(fields)):
            if(fields[x].displayName()=='ordre'):
                return x
        return -1
    
    
    
    def on_Change_ComboLeyenda(self):
        """
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de la capa de punts,
        automÃ ticament comprova els camps de la taula escollida.
        """
        
        L_capa=self.dlg.comboLeyenda.currentText()  
             
        if L_capa == '' or L_capa == 'Selecciona una entitat':
            return
        
        errors = self.controlEntitatLeyenda(L_capa) #retorna una llista amb aquells camps (id, geom, Nom) que no hi siguin.

        if len(errors) < 2:  # errors es una llista amb els camps que te la taula, si hi ha menys de 2, significa que falta algun camp.
            ErrorMessage = "La capa de destí seleccionada no es valida, necessita els camps (id, Nom). Li falten:\n"
            if "id" not in errors:
                ErrorMessage+= '\n-"id"\n'
            #if "geom" not in errors:
            #    ErrorMessage+= '\n-"geom"\n'
            if "Nom" not in errors:
                ErrorMessage+= '\n-"Nom"\n'
            #if "NPlaces" not in errors:
            #    ErrorMessage+= '\n-"NPlaces"\n'
            
            QMessageBox.information(None, "Error", ErrorMessage+'\n')
            
            return False
    
        else:
            #self.dlg.TB_titol.setText(L_capa)
            return True
        
    def controlEntitatLeyenda(self,entitat):
        '''
        Aquest metode mira si la entitat rebuda te els camps (id, geom, Nom) retorna una llista amb aquells camps que hi siguin.
        '''
        global cur
        global conn
        list = []
        
        layers = QgsProject.instance().mapLayers().values()
        if layers != None:
            for layer in layers:
                if layer.type()==QgsMapLayer.VectorLayer:
                    if layer.sourceName() == entitat:
                        for each in layer.fields():
                            if each.name() == "id":
                                list.append("id")
                            #elif each.name() == "geom":
                            #    list.append("geom")
                            elif each.name() == "Nom":
                                list.append("Nom")
        return list     
    
    
    def cerca_elements_Leyenda(self):
        
        if self.dlg.comboConnexio.currentText() != 'Selecciona connexió':
            try: #Accedir als elements de la llegenda que siguin de tipus punt.
                aux = []
                layers = QgsProject.instance().mapLayers().values()
                for layer in layers:
                    #print(layer.type())
                    if layer.type()==QgsMapLayer.VectorLayer:
                        if layer.wkbType()==QgsWkbTypes.Point:
                            aux.append(layer.name())
                        
                self.ompleCombos(self.dlg.comboLeyenda, aux, 'Selecciona una entitat', True)
            except Exception as ex:
                missatge="Error al afegir els elements de la llegenda"
                print (missatge)
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", missatge)
                return
    
    
    def on_click_Inici(self):
        '''
        FUNCIÓ DE CÀLCUL PRINCIPAL
        S'encarrega de fer el càlcul de les N-entitats més properes a l'adreça escollida per l'usuari
        i mostrar per pantalla, tan en el mapa com en el quadre del mòdul, els diferents resultats.
        '''
        global cur
        global conn
        global itemSel
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        
        global lbl_Cost
        global Fitxer
        
        Fitxer=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
        
        
        self.dlg.taulaResultat.clear()
        self.eliminaTaula()
        self.dlg.lbl_numpol.setText('')
        QApplication.processEvents()
        Fitxer=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
        
        
            

        
        '''Control d'errors'''
        llistaErrors = self.controlErrorsInput()
        if len(llistaErrors) > 0:
            llista = "Llista d'errors:\n\n"
            for i in range (0,len(llistaErrors)):
                llista += ("- "+llistaErrors[i] + '\n')
            QMessageBox.information(None, "Error", llista)
            return
        
        if self.dlg.tabWidget_Destino.currentIndex() != 0:
            if (not(self.on_Change_ComboLeyenda())):
                return
         
        self.barraEstat_processant()
            
        uri = QgsDataSourceUri()
        try:
            uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a la connexio")
            conn.rollback()
            return
            
        #********************************************************************************************************
        #    Afegir l'exportació del layer, i posteriorment llençar un avis en cas de que l'entitat sigui buida 
        #********************************************************************************************************
        '''Exportar temporalment la entitat seleccionada de la llegenda a la BBDD'''
        if self.dlg.tabWidget_Destino.currentIndex() != 0: 
            layers = QgsProject.instance().mapLayers().values()
            if layers != None:
                for layer in layers:
                    if layer.name() == self.dlg.comboLeyenda.currentText():
                        error = QgsVectorLayerExporter.exportLayer(layer, 'table="public"."LayerExportat'+Fitxer+'" (geom) '+uri.connectionInfo(), "postgres", layer.crs(), False)
                        if error[0] != 0:
                            iface.messageBar().pushMessage(u'Error', error[1])
                        
                        #cada usuari tindrà la seva taula local temporal "LayerExportat", es una versió Local Temp del Layer exportat de la leyenda.
                        #Amb l'objectiu de que dos usuaris puguin treballar amb el mateix nom de la taula, eliminant concurrencia.
                        try:
                            sql_SRID="SELECT Find_SRID('public', 'LayerExportat"+Fitxer+"', 'geom')"
                            cur.execute(sql_SRID)
                        except Exception as ex:
                            print ("ERROR SELECT SRID")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            QMessageBox.information(None, "Error", "ERROR SELECT SRID")
                            conn.rollback()
                            self.eliminaTaulesCalcul(Fitxer)
                
                            self.bar.clearWidgets()
                            self.dlg.Progres.setValue(0)
                            self.dlg.Progres.setVisible(False)
                            self.dlg.lblEstatConn.setText('Connectat')
                            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                            return
                        auxlist = cur.fetchall()
                        Valor_SRID=auxlist[0][0]
                        alter = 'ALTER TABLE "LayerExportat'+Fitxer+'" ALTER COLUMN geom TYPE geometry(Point,'+str(Valor_SRID)+') USING ST_GeometryN(geom,1);'
                        
                        try:
                            cur.execute(alter)
                            conn.commit()
                        except Exception as ex:
                            print ("ALTER TABLE ERROR_geometry")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            QMessageBox.information(None, "Error", "ALTER TABLE ERROR_geometry")
                            conn.rollback()
                            self.eliminaTaulesCalcul(Fitxer)
                
                            self.bar.clearWidgets()
                            self.dlg.Progres.setValue(0)
                            self.dlg.Progres.setVisible(False)
                            self.dlg.lblEstatConn.setText('Connectat')
                            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                            return
                            
                            
                            
                        select = 'select count (*) from "LayerExportat'+Fitxer+'"'
                        
                        try:                
                            cur.execute(select)
                            auxlist = cur.fetchall()
                            if auxlist[0][0] == 0:
                                ErrorMessage = 'La entitat escollida es buida'
                                QMessageBox.information(None, "Error", ErrorMessage+'\n')
                                conn.rollback()
                                self.eliminaTaulesCalcul(Fitxer)
                    
                                self.bar.clearWidgets()
                                self.dlg.Progres.setValue(0)
                                self.dlg.Progres.setVisible(False)
                                self.dlg.lblEstatConn.setText('Connectat')
                                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                                return
                                
                        except Exception as ex:
                            print("ERROR select LayerExportat")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            QMessageBox.information(None, "Error", errorMessage)
                            conn.rollback()
                            self.eliminaTaulesCalcul(Fitxer)
                
                            self.bar.clearWidgets()
                            self.dlg.Progres.setValue(0)
                            self.dlg.Progres.setVisible(False)
                            self.dlg.lblEstatConn.setText('Connectat')
                            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
                            return
            
        
        '''
        #==============================================
        #    1. Es crea una còpia de la Xarxa de segments i se'n modifiquen el cost i reverse_cost
        #     on s'hi posa el la llargada del segment.
        # ==============================================
        '''     
           
        sql_xarxa = 'drop table IF EXISTS "Xarxa_Prova";\n'
        sql_xarxa += 'create local temp table "Xarxa_Prova" as  (select * from "'+self.dlg.comboGraf.currentText()+'");\n'
        if self.dlg.comboCost.currentText() == 'Distancia':
            sql_xarxa += 'update "Xarxa_Prova" set "cost"="LONGITUD_SEGMENT", "reverse_cost"="LONGITUD_SEGMENT";'
        else:
            if (self.dlg.chk_CostNusos.isChecked()):
                """Es suma al camp 'cost' i a 'reverse_cost' el valor dels semafors sempre i quan estigui la opció marcada"""
                sql_xarxa +='UPDATE "Xarxa_Prova" set "cost"="cost"+(\"Cost_Total_Semafor_Tram\"), \"reverse_cost\"=\"reverse_cost\"+(\"Cost_Total_Semafor_Tram\");\n'
        
        try:
            cur.execute(sql_xarxa)
            conn.commit()
        except Exception as ex:
            print ("CREATE Xarxa_Prova TABLE ERROR")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "CREATE Xarxa_Prova TABLE ERROR")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        '''
        #==============================================
        #    2. Es genera un codi 'Carrer_Num_Bis' amb les dades que l'usuari ha introduit i es passa a una funció auxiliar on
        #    es comprova que aquest existeixi. En el cas que sí que existeixi, aleshores només retorna el codi. Altrament, es busca 
        #    el més proper. I en el cas que no n'existeixi cap, s'envia un missatge d'error
        # ==============================================
        '''
        numero = self.dlg.txt_Numero.text()
        if int(float(numero)) < 10:
            numero = '00' + numero
        elif int(float(numero)) < 100:
            numero = '0' + numero
        lletra = self.dlg.comboLletra.currentText()
        if lletra == ' ':
            lletra = 'x'
        CNB = itemSel + numero + lletra       
        try:
            CNB = self.comprovaCNB(CNB,itemSel,numero,lletra)
        except Exception as ex:
            print ("Error comprovaCNB")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error comprovaCNB")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        if CNB == '-1':
            QMessageBox.information(None, "Error", "TRAM DE VIA SENSE CAP NUMERO POSTAL:\n" + self.dlg.txt_nomCarrer.text() + " " + self.dlg.txt_Numero.text() + " " + self.dlg.comboLletra.currentText())
            self.barraEstat_connectat()
            
            drop = 'drop table IF EXISTS "Xarxa_Prova";\n'
           
            try:
                cur.execute(drop)
                conn.commit()
            except Exception as ex:
                print ("Error DROP break adreça no trobada")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error DROP break adreça no trobada")
                conn.rollback()
                self.eliminaTaulesCalcul(Fitxer)
                return
            return
        
        '''
        #==============================================
        #    3. Mostra l'adreça sobre la qual es fa la cerca a la interficie del modul
        # ==============================================
        '''
        self.dlg.lbl_numpol.setText(self.dlg.txt_nomCarrer.text() + " " + CNB[5:8] + " "+ CNB[-1])
        a=time.time()
        
        if(self.dlg.chk_Local.isChecked()):
            self.local(CNB,uri)     
        
        else:
            self.server(CNB)
        '''
        #    15. Es posa la barra informativa inferior a connectat
        '''
        self.barraEstat_connectat()
        print ("Durada: "+str(int(time.time()-a))+" s.")
        
    def local(self,CNB, uri):
        global Fitxer
        
        
        QApplication.processEvents()
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            sql_punts = 'SELECT * FROM \"' + self.dlg.comboCapaDesti.currentText() + '\"'
        else:
            sql_punts = "SELECT * FROM \"LayerExportat"+Fitxer+"\""
        
        QApplication.processEvents()
        uri.setDataSource("","("+sql_punts+")","geom","","id")
        QApplication.processEvents()
        end_lyr = QgsVectorLayer(uri.uri(False), "fin", "postgres")
        QApplication.processEvents()
        
        sql_punt = 'SELECT * FROM  "dintreilla" WHERE "Carrer_Num_Bis" = \'' + CNB + '\'' 
        QApplication.processEvents()
        uri.setDataSource("","("+sql_punt+")","geom","","id")
        QApplication.processEvents()
        start_lyr = QgsVectorLayer(uri.uri(False), "inici", "postgres")
        QApplication.processEvents()
        
        try:
            sql_inici = 'SELECT "UTM_x","UTM_y" FROM  "dintreilla" WHERE "Carrer_Num_Bis" = \'' + CNB + '\'' 
            cur.execute(sql_inici)
            coordenadas = cur.fetchall()
            start_point = ((str(coordenadas[0]))[1:-1])
        except Exception as ex:
            print ("Error SELECT coordenades")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error SELECT coordenades")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        sql_xarxa="SELECT * FROM \""+self.dlg.comboGraf.currentText()+"\""
        QApplication.processEvents()
        uri.setDataSource("","("+sql_xarxa+")","the_geom","","id")
        QApplication.processEvents()
        network_lyr = QgsVectorLayer(uri.uri(False), "xarxa", "postgres")
        QApplication.processEvents()
        
        resultado = self.calculo_Local(network_lyr,CNB,uri,start_point,end_lyr)
        
        
        '''Borrar tramos sobrantes'''
        features = resultado['OUTPUT'].getFeatures(QgsFeatureRequest().addOrderBy('cost',True))
        try:
            limit = self.getLimit()
        except Exception as ex:
            print ("Error getLimit")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error getLimit")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        resultado['OUTPUT'].startEditing()
        fields = resultado['OUTPUT'].fields()
        for x in range(len(fields)):
            if('nom' in fields[x].displayName().lower()):
                resultado['OUTPUT'].renameAttribute(x,'NomEntitat')
            elif(fields[x].displayName()=='id'):
                resultado['OUTPUT'].renameAttribute(x,'entitatid')
            elif(fields[x].displayName()=='cost'):
                resultado['OUTPUT'].renameAttribute(x,'agg_cost') 
        resultado['OUTPUT'].addAttribute(QgsField('ordre', QVariant.Int))
        
        resultado['OUTPUT'].commitChanges()
        
        
        resultado['OUTPUT'].startEditing()
        featureOrdreList = [] #Variable usada para después poder nombrar fácilmente las etiquetas
        x=0
        for feature in features:
            if(x>=limit):
                resultado['OUTPUT'].deleteFeature(feature.id())
            else:
                self.getIndexOrdre(resultado['OUTPUT'])
                resultado['OUTPUT'].changeAttributeValue(feature.id(),self.getIndexOrdre(resultado['OUTPUT']),x+1)
                featureOrdreList.append(feature.id())
            x = x+1
        resultado['OUTPUT'].commitChanges()
  
  
        '''Borrar puntos sobrantes'''
        puntos_destino = self.save_vlayer(end_lyr) 
        puntos_destino['OUTPUT'].startEditing()
        fields = puntos_destino['OUTPUT'].fields()
        for x in range(len(fields)):
            print(fields[x].displayName())
            if('nom' in fields[x].displayName().lower()):
                print('OK!!!!!')
                puntos_destino['OUTPUT'].renameAttribute(x,'NomEntitat')
            elif(fields[x].displayName()=='id'):
                puntos_destino['OUTPUT'].renameAttribute(x,'entitatid')
                            
        puntos_destino['OUTPUT'].addAttribute(QgsField('ordre', QVariant.Int))
        puntos_destino['OUTPUT'].commitChanges()
        
        fields = puntos_destino['OUTPUT'].fields()
        for x in range(len(fields)):
            print(fields[x].displayName())
            
                     
        
        features = puntos_destino['OUTPUT'].getFeatures()
        puntos_destino['OUTPUT'].startEditing()
        for feature in features: 
            if(self.featureNotInResult(feature,resultado['OUTPUT'])):
                puntos_destino['OUTPUT'].deleteFeature(feature.id())
            else:
                puntos_destino['OUTPUT'].changeAttributeValue(feature.id(),self.getIndexOrdre(puntos_destino['OUTPUT']),self.compareToGetOrdre(feature,resultado['OUTPUT']))
        puntos_destino['OUTPUT'].commitChanges()
        
        
        '''Borrar atributos sobrantes del resultado'''
        resultado['OUTPUT'].startEditing()
        indexAttributesToDelete = []
        for x in range(len(resultado['OUTPUT'].attributeList())):
            if(resultado['OUTPUT'].attributeDisplayName(x)!='ordre' and resultado['OUTPUT'].attributeDisplayName(x)!='entitatid' and resultado['OUTPUT'].attributeDisplayName(x)!='NomEntitat' and resultado['OUTPUT'].attributeDisplayName(x)!='agg_cost'):
                indexAttributesToDelete.append(x)
        resultado['OUTPUT'].deleteAttributes(indexAttributesToDelete)
        resultado['OUTPUT'].commitChanges()

        
        '''Borrar atributos sobrantes de los destinos'''
        puntos_destino['OUTPUT'].startEditing()
        indexAttributesToDelete.clear()
        for x in range(len(puntos_destino['OUTPUT'].attributeList())):
            if(puntos_destino['OUTPUT'].attributeDisplayName(x)!='ordre' and puntos_destino['OUTPUT'].attributeDisplayName(x)!='entitatid' and puntos_destino['OUTPUT'].attributeDisplayName(x)!='NomEntitat'):
                indexAttributesToDelete.append(x)
        puntos_destino['OUTPUT'].deleteAttributes(indexAttributesToDelete)
        puntos_destino['OUTPUT'].commitChanges()
        
        
        '''Representación en taulaResultat'''
        rowCount = self.dlg.taulaResultat.rowCount()
        self.dlg.taulaResultat.setColumnCount(2)
        self.dlg.taulaResultat.setHorizontalHeaderLabels(['Entitat', lbl_Cost])
        for x in range (rowCount,limit):
            self.dlg.taulaResultat.insertRow(x)
            feature = resultado['OUTPUT'].getFeature(featureOrdreList[x])
            self.dlg.taulaResultat.setItem(x, 0, QTableWidgetItem(str(feature['NomEntitat'])))
            self.dlg.taulaResultat.setItem(x, 1, QTableWidgetItem(str(round(feature['agg_cost']))))

      
        '''Representación caminos de destino'''
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            titol=self.dlg.comboCapaDesti.currentText()
        else:
            titol=self.dlg.comboLeyenda.currentText()
        
        titol2='Camins més propers a '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        #vlayer = QgsVectorLayer(uri.uri(False), titol3.decode('utf8'), "postgres")
        #vlayer = QgsVectorLayer(resultado['OUTPUT'].source(), titol3.decode('utf8'), resultado['OUTPUT'].providerType())
        vlayer = resultado['OUTPUT']
        vlayer.setName(titol3.decode('utf8'))
        QApplication.processEvents()
        
        if(vlayer.isValid):
            #orgEncoding=QgsSettings().value('/Processing/encoding') # save setting
            #QgsSettings().setValue('/Processing/encoding', 'utf-8') # set uft8
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            #error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Camins_"+Cobertura+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            #vlayer = QgsVectorLayer(os.environ['TMP']+"/Camins_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")

            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            
            '''Es prepara cada camí de la capa amb diferent color i gruix en funcio de la distància a la que estigui de l'origen '''
            GradSymMin = 0
            GradSymMax = limit
            GradSymNoOfClasses = limit
            #GradSymInterval = round(((int(GradSymMax) - int(GradSymMin)) / float(GradSymNoOfClasses)),0)
            GradSymInterval = 1.0
            myRangeList = []
            gruix = 2.5
            interval = float(gruix/limit)
            
            
            for x in range (GradSymNoOfClasses):
                if x == 0:
                    min = 0
                    max = 1
                    color = QColor(0, 255, 255*x/GradSymNoOfClasses)
                elif x == (GradSymNoOfClasses - 1):
                    min = GradSymMax-1
                    max = GradSymMax
                    color =  QColor(255*x/GradSymNoOfClasses, 0, 0)
                else:
                    min = int(GradSymMin)+(GradSymInterval*x)+0.001
                    max = int(GradSymMin)+GradSymInterval*(x+1)
                    color = QColor(255*x/GradSymNoOfClasses, 255-(255*x/GradSymNoOfClasses), 0)
                
                feature = resultado['OUTPUT'].getFeature(featureOrdreList[x])
                label = str(feature['ordre']) + ". " +str(feature['NomEntitat'])
                symbol=QgsLineSymbol()

                registry = QgsSymbolLayerRegistry()
                lineMeta = registry.symbolLayerMetadata("SimpleLine")
                #Line layer
                lineLayer = lineMeta.createSymbolLayer({'width': '1', 'color': '255,0,0', 'offset': '0', 'penstyle': 'solid', 'use_custom_dash': '0', 'joinstyle': 'bevel', 'capstyle': 'round'})

                symbol.deleteSymbolLayer(0)
                symbol.appendSymbolLayer(lineLayer)

                symbol.setWidth(gruix)
                symbol.setColor(color)                          
                
                ranger = QgsRendererRange(min, max, symbol, label)
                myRangeList.append(ranger)
                gruix -= float(interval)

            '''Es renderitzen els estils de cada cami'''
            fieldname='ordre'
            format = QgsRendererRangeLabelFormat()
            
            '''S'apliquen els estils a la capa'''
            renderer = QgsGraduatedSymbolRenderer(fieldname,myRangeList)           
            renderer.setLabelFormat(format,True)
            
            renderer.setOrderByEnabled(True)
            listOrder = []
            listOrder.append(QgsFeatureRequest().OrderByClause("ordre",True))
            renderer.setOrderBy(QgsFeatureRequest().OrderBy(listOrder))
            
        
            vlayer.setRenderer(renderer)
            QApplication.processEvents()

            
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            myLayerNode.setCustomProperty("showFeatureCount", False)
            QApplication.processEvents()
            iface.mapCanvas().refresh()
            self.eliminaTaulesCalcul(Fitxer)
            ''''S'afegeix la capa a la pantalla'''
            #iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 1:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
    
        '''
         # S'afegeixen els punts de destí a pantalla amb les corresponents etiquetes amb els seus noms
        
        # Es prepara el titol de la capa que apareixerà a la llegenda
        '''
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            titol=self.dlg.comboCapaDesti.currentText()
        else:
            titol=self.dlg.comboLeyenda.currentText() 
                   
        titol2='Entitats de destí '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        vlayer = puntos_destino['OUTPUT']
        QApplication.processEvents()
        '''
        #  Si la capa és vàlida, es carrega en SHAPE en un arxiu temporal
        '''
        if vlayer.isValid():
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Entitats_"+Cobertura+".shp", "latin1", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            vlayer = QgsVectorLayer(os.environ['TMP']+"/Entitats_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")
            #vlayer.setLayerTransparency(50)
            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            symbol.setColor(QColor.fromRgb(250,50,250))
            '''S'afegeixen totes les propietats a la capa: color, tipus de font de l'etiqueta, colocacio, nom del camp a mostrar, etc'''

            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            
            text_format.setFont(QFont("Arial", 16))
            text_format.setSize(16)
            
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("white"))
            
            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            
            layer_settings.isExpression = True
            layer_settings.fieldName = "concat( ordre,'. ',NomEntitat)"
            layer_settings.placement = 2
            layer_settings.scaleVisibility = True
            layer_settings.minimumScale = 20000
            layer_settings.maximumScale = 3000
            
            layer_settings.enabled = True
            
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vlayer.setLabelsEnabled(True)
            vlayer.setLabeling(layer_settings)
            vlayer.triggerRepaint()
            QApplication.processEvents()
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            myLayerNode.setCustomProperty("showFeatureCount", False)
            QApplication.processEvents()
            ''''S'afegeix la capa a la pantalla'''
            iface.mapCanvas().refresh()
            #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 2:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
            
        '''
        #  S'afegeix el punt d'origen a pantalla
        
        # Es prepara el titol de la capa que apareixerà a la llegenda
        '''
        titol=self.dlg.lbl_numpol.text()
        titol2='Entitat d\'origen: '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        vlayer = start_lyr
        QApplication.processEvents()
        '''
        # Si la capa és vàlida, es carrega en SHAPE en un arxiu temporal
        '''
        if vlayer.isValid():
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Entitats_"+Cobertura+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            vlayer = QgsVectorLayer(os.environ['TMP']+"/Entitats_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")
            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            '''S'afegeix el color a la nova entitat'''
            symbol.setColor(QColor.fromRgb(50,250,250))
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            myLayerNode.setCustomProperty("showFeatureCount", False)
            QApplication.processEvents()
            ''''S'afegeix la capa a la pantalla'''
            iface.mapCanvas().refresh()
            #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 3:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
                   
                   
                    
    def server(self, CNB):
        global Fitxer
        
        '''Cálculo en el servidor'''
        '''
        #==============================================
        #    4. S'ajunten tots els punts tan de sortida com de destí en una sola taula per preparar-los per la
        #    funció del PGRounting pgr_withPointsKSP: dintreilla + punts de la capa de destí
        #    4.1 S'esborra i es crea una nova taula
        # ==============================================
        '''
        drop = 'DROP TABLE IF EXISTS NecessaryPoints_'+Fitxer+';'
        try:
            cur.execute(drop)
            conn.commit()
        except Exception as ex:
            print ("Error DROP TABLE 1")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error DROP TABLE 1")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        create = 'CREATE TABLE NecessaryPoints_'+Fitxer+' (\n'
        create += "\tpid    serial primary key,\n"
        create += "\tthe_geom geometry,\n"
        create += "\tentitatID int8,\n"
        create += "\tedge_id BIGINT,\n"
        create += "\tfraction FLOAT,\n"
        create += "\tnewPoint geometry);"
        try:
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("Error CREATE NecessaryPoints")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error CREATE NecessaryPoints")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
            
        '''
        #    4.2 S'afegeixen els punts necessaris a la taula
        '''            
        insert = 'INSERT INTO NecessaryPoints_'+Fitxer+' (entitatID,the_geom) (SELECT 0, ST_Centroid("geom") the_geom from "dintreilla" where "Carrer_Num_Bis" = \''+CNB+'\');\n'
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            insert += 'INSERT INTO NecessaryPoints_'+Fitxer+' (entitatID, the_geom) (SELECT "id", ST_Centroid("geom") the_geom from "' + self.dlg.comboCapaDesti.currentText() + '" order by "id");'
        else:
            insert += 'INSERT INTO NecessaryPoints_'+Fitxer+' (entitatID, the_geom) (SELECT "id", ST_Centroid("geom") the_geom from "LayerExportat'+Fitxer+'" order by "id");'
        
        try:
            cur.execute(insert)
            conn.commit()
        except Exception as ex:
            print ("Error INSERT NecessaryPoints")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error INSERT NecessaryPoints")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        '''
        #    4.3 S'afegeix el id del tram al que estan més pròxims els punts, els punts projectats sobre el graf 
        #    i la fracció de segment a on estant 
        '''
        update = 'UPDATE NecessaryPoints_'+Fitxer+' set "edge_id"=tram_proper."tram_id" from (SELECT distinct on(Poi."pid") Poi."pid" As Punt_id,Sg."id" as Tram_id, ST_Distance(Sg."the_geom",Poi."the_geom")  as dist FROM "Xarxa_Prova" as Sg,NecessaryPoints_'+Fitxer+' AS Poi ORDER BY  Poi."pid",ST_Distance(Sg."the_geom",Poi."the_geom"),Sg."id") tram_proper where NecessaryPoints_'+Fitxer+'."pid"=tram_proper."punt_id";\n'
        update += 'UPDATE NecessaryPoints_'+Fitxer+' SET fraction = ST_LineLocatePoint(e.the_geom, NecessaryPoints_'+Fitxer+'.the_geom),newPoint = ST_LineInterpolatePoint(e."the_geom", ST_LineLocatePoint(e."the_geom", NecessaryPoints_'+Fitxer+'."the_geom")) FROM "Xarxa_Prova" AS e WHERE NecessaryPoints_'+Fitxer+'."edge_id" = e."id";\n'
        try:
            cur.execute(update)
            conn.commit()
        except Exception as ex:
            print ("Error UPDATE NecessaryPoints")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error UPDATE NecessaryPoints")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
            
        '''
        #    4.4 Es fa una consulta per poder generar una sentencia SQL que faci la cerca de
        #    tots els camins més curts a tots el punts necessaris
        '''
        select = 'select * from NecessaryPoints_'+Fitxer+' order by pid'
        try:
            cur.execute(select)
            vec = cur.fetchall()
        except Exception as ex:
            print ("Error SELECT NecessaryPoints")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error SELECT NecesaryPoints")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return 
        create = 'create local temp table "Resultat" as SELECT * FROM (\n'
        for x in range (0,len(vec)):
            if x < len(vec) and x >= 2:
                create += 'UNION\n'
            if x != 0:
                if vec[x][4] == 1.0 or vec[x][4] == 0.0:
                    create += 'select '+ str(x) +' as routeID,'+ str(vec[x][2]) +' as entitatID, * from pgr_withPointsKSP(\'SELECT id, source, target, cost, reverse_cost FROM "Xarxa_Prova" ORDER BY id\',\'SELECT pid, edge_id, fraction from NecessaryPoints_'+Fitxer+'\',-1,' + str(vec[x][2])+',1)\n'
                else:
                    create += 'select '+ str(x) +' as routeID,'+ str(vec[x][2]) +' as entitatID, * from pgr_withPointsKSP(\'SELECT id, source, target, cost, reverse_cost FROM "Xarxa_Prova" ORDER BY id\',\'SELECT pid, edge_id, fraction from NecessaryPoints_'+Fitxer+'\',-1,-' + str(vec[x][0]) +',1)\n'
        create += ')QW ORDER BY routeID, seq;'
        
        '''
        #    4.5 Selecció del nom del camp on figura el Nom de l'entitat de destí
        '''
        try:
            if self.dlg.tabWidget_Destino.currentIndex() == 0:
                select="SELECT column_name FROM information_schema.columns WHERE table_schema = 'public' and table_name = '"+ self.dlg.comboCapaDesti.currentText() +"'and column_name like 'Nom';"
            else:
                select="SELECT column_name FROM information_schema.columns WHERE table_schema = 'public' and table_name = 'LayerExportat"+Fitxer+"'and lower(column_name) like 'nom';"
            cur.execute(select)
            nomCamp = cur.fetchall()
        except Exception as ex:
            print ("Error SELECT CAMP NOM")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error SELECT CAMP NOM")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
            
        '''
        #    5. Destrucció i creació de la taula on figuren tots els camins possibles
        '''
        drop = 'DROP TABLE IF EXISTS "Resultat";'
        try:
            cur.execute(drop)
            conn.commit()
        except Exception as ex:
            print ("Error DROP TABLE 2")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error DROP TABLE 2")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        try:
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("Error CREATE Resultat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error CREATE Resultat")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        '''
        #    6. Destrucció i creació de la taula "Segments finals" on figuren tots els camins possibles que són prinicipi i/o final
        '''

        drop = "DROP TABLE IF EXISTS \"SegmentsFinals\";"
        try:
            cur.execute(drop)
            conn.commit()
        except Exception as ex:
                print ("Error DROP Table 1")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error DROP Table 1")
                conn.rollback()
                self.eliminaTaulesCalcul(Fitxer)
                return
        
        create = "CREATE local temp TABLE \"SegmentsFinals\" (\n"
        create += "\trouteid int8,\n"
        create += "\tedge int8,\n"
        create += "\t\"edgeAnt\" int8,\n"
        create += "\tfraction FLOAT,\n"
        create += "\t\"ordreTram\" int8,\n"
        create += "\t\"cutEdge\" geometry);"
        try:
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("Error CREATE SegmentsFinals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error CREATE SegmentsFinals")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
            
        '''
        #    6.1 Query per seleccionar els segments que són inici i final
        '''
        select = 'select routeid, node, edge from "Resultat" order by routeid, path_seq;'
        try:
            cur.execute(select)
            vec = cur.fetchall()
            conn.commit()            
        except Exception as ex:
            print ("Error CREATE Resultat")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error CREATE Resultat")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
            
        insert = ''
        for x in range (len(vec)):
            if vec[x][1] < 0:
                if vec[x][1] != -1:
                    insert += 'INSERT INTO "SegmentsFinals" (routeid, edge, "edgeAnt", "ordreTram") VALUES (' + str(vec[x][0]) + ', ' + str(vec[x-1][2]) + ', ' + str(vec[x-2][2]) + ', ' + str(2) +');\n'
                else:
                    insert += 'INSERT INTO "SegmentsFinals" (routeid, edge, "edgeAnt", "ordreTram") VALUES (' + str(vec[x][0]) + ', ' + str(vec[x][2]) + ', ' + str(vec[x+1][2]) + ', ' + str(1) + ');\n'
        try:
            cur.execute(insert)
            conn.commit()            
        except Exception as ex:
            print ("Error INSERT SegmentsFinals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error INSERT SegmentsFinals")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
            
        '''
        #    6.2 UPDATE per poder afegir la fracció en què es troba el punt sobre el segment
        '''
        select = 'select routeid, edge, "ordreTram" from "SegmentsFinals" order by routeid, "ordreTram";'
        try:
            cur.execute(select)
            vec = cur.fetchall()
            conn.commit()
        except Exception as ex:
            print ("Error SELECT SegmentsFinals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error SELECT SegmentsFinals")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return

        update = ''
        for x in range(len(vec)):
            ruta = vec[x][0]
            edge = vec[x][1]
            ordre = vec[x][2]
            if ordre == 1:
                update += 'update "SegmentsFinals" s set fraction = n.fraction from NecessaryPoints_'+Fitxer+' n where n.edge_id = '+str(edge)+' and s.edge ='+str(edge)+' and s."ordreTram" = 1 and s.routeid = '+str(ruta)+' and n.entitatid = 0;\n'
            else:
                update += 'update "SegmentsFinals" s set fraction = n.fraction from NecessaryPoints_'+Fitxer+' n where n.edge_id = '+str(edge)+' and s.edge ='+str(edge)+' and s."ordreTram" = 2 and s.routeid = '+str(ruta)+' and n.pid = '+str(ruta+1)+';\n'

        try:
            cur.execute(update)
            conn.commit()            
        except Exception as ex:
            print ("Error UPDATE SegmentsFinals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error UPDATE SegmentsFinals")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        '''
        #    6.3 Query per escollir i afegir el tros de tram que correspon a cada inici i final 
        #    Posteriorment es fa un UPDATE del camp de geometria de la taula 'SegmentsFinals' amb els trams ja retallats
        '''
        select = 'select * from "SegmentsFinals" order by routeid;'
        try:
            cur.execute(select)
            vec = cur.fetchall()
            conn.commit()
        except Exception as ex:
            print ("Error SELECT SegmentsFinals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error SELECT SegmentsFinals")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        updateSegment = ''
        for x in range(len(vec)):
            ordre = vec[x][4]
            fraction = vec[x][3]
            edgeAnt = vec[x][2]
            edge = vec[x][1]
            selectTouch = 'SELECT ST_Touches((select ST_Line_Substring("Xarxa_Prova"."the_geom",0,'+str(fraction)+') as geom from "Xarxa_Prova" where "id"='+str(edge)+'),(select the_geom as  geom from "Xarxa_Prova" where "id"='+str(edgeAnt)+'));'
            try:
                cur.execute(selectTouch)
                resposta = cur.fetchall()
                conn.commit()
            except Exception as ex:
                print ("Error SELECT TOUCH")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                QMessageBox.information(None, "Error", "Error SELECT TOUCH")
                conn.rollback()
                self.eliminaTaulesCalcul(Fitxer)
                return
            if edgeAnt != -1:   
                if resposta[0][0]:
                    updateSegment += 'update "SegmentsFinals" sf set "cutEdge" = ST_Line_Substring(s."the_geom",0,'+str(fraction)+') from "Xarxa_Prova" s where sf."edge"='+str(edge)+' and s."id"='+str(edge)+' and sf."routeid" = '+str(vec[x][0])+';\n'
                else:
                    updateSegment += 'update "SegmentsFinals" sf set "cutEdge" = ST_Line_Substring(s."the_geom",'+str(fraction)+',1) from "Xarxa_Prova" s where sf."edge"='+str(edge)+' and s."id"='+str(edge)+' and sf."routeid" = '+str(vec[x][0])+';\n'
            else:
                if ordre == 1:
                    fractForward = vec[x+1][3]
                else:
                    fractForward = vec[x-1][3]
                if fraction >= fractForward:
                    updateSegment += 'update "SegmentsFinals" sf set "cutEdge" = ST_Line_Substring(s."the_geom",'+str(fractForward)+','+str(fraction)+') from "Xarxa_Prova" s where sf."ordreTram" = '+ str(ordre)+' and sf."edge"='+str(edge)+' and s."id"='+str(edge)+' and sf."routeid" = '+str(vec[x][0])+';\n'
                else:
                    updateSegment += 'update "SegmentsFinals" sf set "cutEdge" = ST_Line_Substring(s."the_geom",'+str(fraction)+','+str(fractForward)+') from "Xarxa_Prova" s where sf."ordreTram" = '+ str(ordre)+' and sf."edge"='+str(edge)+' and s."id"='+str(edge)+' and sf."routeid" = '+str(vec[x][0])+';\n'
                        

        try:
            cur.execute(updateSegment)
            conn.commit()
        except Exception as ex:
            print ("Error UPDATE SegmentsFinals Geometries")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error UPDATE SegmentsFinals Geometries")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        '''
        #    7. S'afegeix i s'actualitza el camp de geometria a la taula resultat
        '''
        alter = 'ALTER TABLE "Resultat" ADD COLUMN newEdge geometry;\n'
        alter += 'update "Resultat" r set newedge = s.the_geom from "Xarxa_Prova" s where s.id = r.edge;'

        try:
            cur.execute(alter)
            conn.commit()
        except Exception as ex:
            print ("Error ALTER and UPDATE Resultat Geometries")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error ALTER and UPDATE Resultat Geometries")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return

        '''
        #    8. UPDATE per actualitzar els trams retallats a la taula 'Resultat'
        '''
        update = 'update "Resultat" r set newedge = s."cutEdge" from "SegmentsFinals" s where s."routeid" = r.routeid and s.edge = r.edge;'
        try:
            cur.execute(update)
            conn.commit()
        except Exception as ex:
            print ("Error ALTER and UPDATE Resultat Geometries")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error ALTER and UPDATE Resultat Geometries")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return

        
        '''
        #    9. Seleccio dels N-camins més proxims al domicili indicat per tal de presentar els resultats
        #    en el quadre de la interficie del modul
        '''
        try:
            limit = self.getLimit()
        except Exception as ex:
            print ("Error getLimit")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error getLimit")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            select = 'select e."'+ nomCamp[0][0] +'" as NomEntitat, r.agg_cost as Cost, r.entitatID from "Resultat" r  join "' + self.dlg.comboCapaDesti.currentText() + '" e on r.entitatID = e.id where  r.edge = -1 order by 2 asc limit ' + str(limit) + ';'
        else:
            select = 'select e."'+ nomCamp[0][0] +'" as NomEntitat, r.agg_cost as Cost, r.entitatID from "Resultat" r  join "LayerExportat'+Fitxer+'" e on r.entitatID = e.id where  r.edge = -1 order by 2 asc limit ' + str(limit) + ';'
        try:
            cur.execute(select)
            vec = cur.fetchall()
            conn.commit()
        except Exception as ex:
            print ("Error SELECT resultats")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error SELECT resultats")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
            
        '''
        #    10. Drop i Create d'una sentencia SQL per obtenir els trams junts per a cada camí optim escollit
        #     i al mateix temps, s'afegeix la informació obtinguda en el select anterior.
        '''
        createTrams = 'drop table if exists "TramsNous_'+Fitxer+'";\n'
        createTrams += 'create table "TramsNous_'+Fitxer+'" as select * from (\n' 
        rowCount = self.dlg.taulaResultat.rowCount()
        self.dlg.taulaResultat.setColumnCount(2)
        self.dlg.taulaResultat.setHorizontalHeaderLabels(['Entitat', lbl_Cost])
        if self.dlg.comboCost.currentText() == 'Distancia':
            rnd = 0
        else:
            rnd = 1
        for x in range (rowCount,len(vec)):
            self.dlg.taulaResultat.insertRow(x)
            self.dlg.taulaResultat.setItem(x, 0, QTableWidgetItem(str(vec[x][0])))
            self.dlg.taulaResultat.setItem(x, 1, QTableWidgetItem(str(round(vec[x][1],rnd))))
            if x < len(vec) and x >= 1:
                createTrams += 'UNION\n'
                
            createTrams += 'select entitatid, \'' + str(vec[x][0].replace("'","''")) +'\' as "NomEntitatDesti" ,'+str(round(vec[x][1]))+' as agg_cost, ST_Union(newedge) as the_geom from "Resultat" where entitatid = '+str(vec[x][2])+' group by entitatid\n'
        
        createTrams += ")total order by agg_cost asc;"
        QApplication.processEvents()
        
        '''
        #    10.1 Execució de la sentencia SQL per crear la taula amb els trams
        '''
        try:
            cur.execute(createTrams)
            conn.commit()
        except Exception as ex:
            print ("Error CREATE trams")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error CREATE trams")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
            
        '''
        #    11. Presentació per pantalla dels diferents camins
        #    Primer es fa la connexio amb el servei per poder presentar les dades a pantalla
        '''            
        uri = QgsDataSourceUri()
        try:
            uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error a la connexio")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        '''
        #   11.1 Es fa la selecció de les dades que es volen presentar
        '''
        sql_total = 'select row_number() OVER() AS "id",* from "TramsNous_'+Fitxer+'"'
        QApplication.processEvents()
        uri.setDataSource("","("+sql_total+")","the_geom","","entitatid")
        QApplication.processEvents()
        
        try:
            cur.execute(sql_total)
            resultat = cur.fetchall()
        except Exception as ex:
            print ("Error SELECT CAMP NOM Etiquetes")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error SELECT CAMP NOM Etiquetes")
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)
            return
        
        '''
        #    11.2 Es prepara el titol de la capa que apareixerà a la llegenda
        '''
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            titol=self.dlg.comboCapaDesti.currentText()
        else:
            titol=self.dlg.comboLeyenda.currentText()
        titol2='Camins més propers a '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        vlayer = QgsVectorLayer(uri.uri(False), titol3.decode('utf8'), "postgres")
        QApplication.processEvents()
        '''
        #   11.3 Si la capa és vàlida, es carrega en SHAPE en un arxiu temporal
        '''
        if vlayer.isValid():
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Camins_"+Cobertura+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            vlayer = QgsVectorLayer(os.environ['TMP']+"/Camins_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")

            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            
            '''Es prepara cada camí de la capa amb diferent color i gruix en funcio de la distància a la que estigui de l'origen '''
            GradSymMin = 0
            GradSymMax = limit
            GradSymNoOfClasses = limit
            GradSymInterval = round(((int(GradSymMax) - int(GradSymMin)) / float(GradSymNoOfClasses)),0)
            myRangeList = []
            gruix = 2.5
            interval = float(gruix/limit)
            
            
            for x in range (GradSymNoOfClasses):
                if x == 0:
                    min = 0
                    max = 1
                    color = QColor(0, 255, 255*x/GradSymNoOfClasses)
                elif x == (GradSymNoOfClasses - 1):
                    min = GradSymMax-1
                    max = GradSymMax
                    color =  QColor(255*x/GradSymNoOfClasses, 0, 0)
                else:
                    min = int(GradSymMin)+(GradSymInterval*x)+0.001
                    max = int(GradSymMin)+GradSymInterval*(x+1)
                    color = QColor(255*x/GradSymNoOfClasses, 255-(255*x/GradSymNoOfClasses), 0)
                
                label = str(resultat[x][0]) + ". " +str(resultat[x][2])                    
                symbol=QgsLineSymbol()

                registry = QgsSymbolLayerRegistry()
                lineMeta = registry.symbolLayerMetadata("SimpleLine")
                #Line layer
                lineLayer = lineMeta.createSymbolLayer({'width': '1', 'color': '255,0,0', 'offset': '0', 'penstyle': 'solid', 'use_custom_dash': '0', 'joinstyle': 'bevel', 'capstyle': 'round'})

                symbol.deleteSymbolLayer(0)
                symbol.appendSymbolLayer(lineLayer)

                symbol.setWidth(gruix)
                symbol.setColor(color)                
                
                ranger = QgsRendererRange(min, max, symbol, label)
                myRangeList.append(ranger)
                gruix -= float(interval)

            '''Es renderitzen els estils de cada cami'''
            fieldname="id"
            format = QgsRendererRangeLabelFormat()
            
            '''S'apliquen els estils a la capa'''
            renderer = QgsGraduatedSymbolRenderer(fieldname,myRangeList)           
            renderer.setLabelFormat(format,True)
            vlayer.setRenderer(renderer)
            QApplication.processEvents()

            
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            myLayerNode.setCustomProperty("showFeatureCount", False)
            QApplication.processEvents()
            iface.mapCanvas().refresh()
            ''''S'afegeix la capa a la pantalla'''
            #iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 1:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
            
        '''
        #    12. S'afegeixen els punts de destí a pantalla amb les corresponents etiquetes amb els seus noms
        #    12.1 Es seleccionen les dades que es vol mostrar
        '''
        sql_total = 'select row_number() OVER(order by t."agg_cost") AS "id",n.entitatid, n.the_geom, t."NomEntitatDesti" as "NomEntitat" from "TramsNous_'+Fitxer+'" t join NecessaryPoints_'+Fitxer+' n on n.entitatid = t.entitatid order by t."agg_cost" ASC'
        QApplication.processEvents()
        uri.setDataSource("","("+sql_total+")","the_geom","","id")
        QApplication.processEvents()

        '''
        #    12.2 Es prepara el titol de la capa que apareixerà a la llegenda
        '''
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            titol=self.dlg.comboCapaDesti.currentText()
        else:
            titol=self.dlg.comboLeyenda.currentText()
        titol2='Entitats de destí '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        vlayer = QgsVectorLayer(uri.uri(False), titol3.decode('utf8'), "postgres")
        QApplication.processEvents()
        '''
        #    12.3 Si la capa és vàlida, es carrega en SHAPE en un arxiu temporal
        '''
        if vlayer.isValid():
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Entitats_"+Cobertura+".shp", "latin1", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            vlayer = QgsVectorLayer(os.environ['TMP']+"/Entitats_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")
            #vlayer.setLayerTransparency(50)
            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            symbol.setColor(QColor.fromRgb(250,50,250))
            '''S'afegeixen totes les propietats a la capa: color, tipus de font de l'etiqueta, colocacio, nom del camp a mostrar, etc'''

            layer_settings  = QgsPalLayerSettings()
            text_format = QgsTextFormat()
            
            text_format.setFont(QFont("Arial", 16))
            text_format.setSize(16)
            
            buffer_settings = QgsTextBufferSettings()
            buffer_settings.setEnabled(True)
            buffer_settings.setSize(1)
            buffer_settings.setColor(QColor("white"))
            
            text_format.setBuffer(buffer_settings)
            layer_settings.setFormat(text_format)
            
            layer_settings.isExpression = True
            layer_settings.fieldName = "concat( id,'. ',NomEntitat)"
            layer_settings.placement = 2
            layer_settings.scaleVisibility = True
            layer_settings.minimumScale = 20000
            layer_settings.maximumScale = 3000
            
            layer_settings.enabled = True
            
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            vlayer.setLabelsEnabled(True)
            vlayer.setLabeling(layer_settings)
            vlayer.triggerRepaint()
            QApplication.processEvents()
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            myLayerNode.setCustomProperty("showFeatureCount", False)
            QApplication.processEvents()
            ''''S'afegeix la capa a la pantalla'''
            iface.mapCanvas().refresh()
            #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 2:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
            
        '''
        #    13. S'afegeix el punt d'origen a pantalla
        #    13.1 Es selecciona la dada que es vol mostrar
        '''
        sql_total = 'select pid, the_geom from NecessaryPoints_'+Fitxer+' where pid = 1'
        QApplication.processEvents()
        uri.setDataSource("","("+sql_total+")","the_geom","","pid")
        QApplication.processEvents()
        
        '''
        #    13.2 Es prepara el titol de la capa que apareixerà a la llegenda
        '''
        titol=self.dlg.lbl_numpol.text()
        titol2='Entitat d\'origen: '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        vlayer = QgsVectorLayer(uri.uri(False), titol3.decode('utf8'), "postgres")
        QApplication.processEvents()
        '''
        #    13.3 Si la capa és vàlida, es carrega en SHAPE en un arxiu temporal
        '''
        if vlayer.isValid():
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Entitats_"+Cobertura+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            vlayer = QgsVectorLayer(os.environ['TMP']+"/Entitats_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")
            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            '''S'afegeix el color a la nova entitat'''
            symbol.setColor(QColor.fromRgb(50,250,250))
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            myLayerNode.setCustomProperty("showFeatureCount", False)
            QApplication.processEvents()
            ''''S'afegeix la capa a la pantalla'''
            iface.mapCanvas().refresh()
            #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 3:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
        
        '''
        #    14. S'esborren les taules utilitzades durant el càlcul
        '''

        self.eliminaTaulesCalcul(Fitxer)
  
    def eliminaTaulesCalcul(self,Fitxer):
        global cur
        global conn
        try:
            cur.execute('DROP TABLE IF EXISTS "Xarxa_Prova";\n')
            cur.execute('DROP TABLE IF EXISTS "Resultat";\n') 
            cur.execute('DROP TABLE IF EXISTS checkNum;\n')
            cur.execute('DROP TABLE IF EXISTS "TramsNous_'+Fitxer+'";\n')
            cur.execute('DROP TABLE IF EXISTS NecessaryPoints_'+Fitxer+';\n')
            cur.execute('DROP TABLE IF EXISTS "SegmentsFinals";\n')
            cur.execute('DROP TABLE IF EXISTS "LayerExportat'+Fitxer+'";\n')
            conn.commit()
        except Exception as ex:
            print("Error DROP final")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", "Error DROP final")
            conn.rollback()
            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            
            
            
    def eliminaTaula(self):
        '''
        Aquesta funció s'encarrega de buidar el quadre on apareix el resultat del càlcul
        '''
        self.dlg.taulaResultat.clear()
        columns = self.dlg.taulaResultat.columnCount()
        for z in range (0,columns):
            self.dlg.taulaResultat.removeColumn(z)
        rows = self.dlg.taulaResultat.rowCount()
        for z in range (0,rows):
            self.dlg.taulaResultat.removeRow(z)
        self.dlg.taulaResultat.setRowCount(0)
        self.dlg.taulaResultat.setColumnCount(0)
            
    
    def getLimit(self):
        '''
        Aquesta funció s'encarrega de obtenir el límit de camins que s'han de crear,
        ja que es pot donar el cas que N-camins si sigui major que nombre d'entitats de desti
        '''
        global cur
        global conn
        global Fitxer
        limitUsuari = self.dlg.SB_camins.value()
        if self.dlg.tabWidget_Destino.currentIndex() == 0:
            count = 'select count(*) from \"' + self.dlg.comboCapaDesti.currentText() + '\";'
        else:
            count = 'select count(*) from "LayerExportat'+Fitxer+'";'
        
        
        cur.execute(count)
        vect = cur.fetchall()
        
        if (limitUsuari > vect[0][0]):
            return vect[0][0]
        else:
            return limitUsuari
        
    def barraEstat_processant(self):
        '''Aquesta funció canvia l'aparença de la barra inferior a "Processant"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 125, 155)')
        self.dlg.lblEstatConn.setText("Processant...")
        QApplication.processEvents()
        
    def barraEstat_noConnectat(self):
        '''Aquesta funció canvia l'aparença de la barra inferior a "No connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.lblEstatConn.setText('No connectat')
        QApplication.processEvents()
        
    def barraEstat_connectat(self):
        '''Aquesta funció canvia l'aparença de la barra inferior a "Connectat"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')
        QApplication.processEvents()
        
    def barraEstat_connectant(self):
        '''Aquesta funció canvia l'aparença de la barra inferior a "Connectant"'''
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
        self.dlg.lblEstatConn.setText('Connectant...')
        QApplication.processEvents()
        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('&exemple'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.estatInicial()
        self.dlg.show()
        conn=self.getConnections()
        # Run the dialog event loop
        self.populateComboBox(self.dlg.comboConnexio ,conn,'Selecciona connexió',True)
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass